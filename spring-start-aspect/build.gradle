plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id("io.freefair.lombok") version "8.13.1"
//    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
}


group = 'net.aspect.education'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    querydsl.extendsFrom implementation, compileOnly, runtimeOnly
}

repositories {
    mavenCentral()
}

dependencies {

    //Test
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    //Сваггер докумектатор
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

    implementation 'org.apache.commons:commons-lang3:3.17.0'
    // PostgreSQL Driver
    runtimeOnly 'org.postgresql:postgresql'
    //querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor('com.querydsl:querydsl-apt:5.0.0:jakarta',
            "jakarta.persistence:jakarta.persistence-api:3.1.0")


}

//querydsl {
//    jpa = true
//    library = 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
//    querydslSourcesDir="/generated/sources/annotationProcessor/java/main"
//}

//initQuerydslSourcesDir.dependsOn clean

//compileQuerydsl {
//    options.annotationProcessorPath = configurations.querydsl
//}

tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/sources/annotationProcessor/java/main")
}

sourceSets {
    main.java.srcDirs += "$buildDir/generated/sources/annotationProcessor/java/main"
}

test {
    useJUnitPlatform()
}

gradle.taskGraph.whenReady {
    TaskExecutionGraph graph ->
        println "*---*---*---*---*---*---*---*---*---*---*---*---*---*---*---*"
        println "graph: "
        graph.allTasks.each(it ->
                println "${it.name}"
        )
        println "*---*---*---*---*---*---*---*---*---*---*---*---*---*---*---*"
}